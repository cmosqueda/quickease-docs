"use strict";(self.webpackChunkquickease_doc=self.webpackChunkquickease_doc||[]).push([[756],{7728:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"installation-and-setup/web-setup","title":"Web Version Setup","description":"This is the QuickEase 2.0\'s web version setup. Mobile app is yet to be developed.","source":"@site/docs/installation-and-setup/web-setup.md","sourceDirName":"installation-and-setup","slug":"/installation-and-setup/web-setup","permalink":"/quickease-docs/docs/installation-and-setup/web-setup","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2,"sidebar_label":"Web Version Setup"},"sidebar":"tutorialSidebar","previous":{"title":"Prerequisites","permalink":"/quickease-docs/docs/installation-and-setup/prerequisites"},"next":{"title":"Database Schema","permalink":"/quickease-docs/docs/database-schema"}}');var i=s(4848),r=s(8453);const o={sidebar_position:2,sidebar_label:"Web Version Setup"},l="Web Version Setup",a={},c=[{value:"Forking the GitHub repository",id:"forking-the-github-repository",level:2},{value:"Project Structure Overview",id:"project-structure-overview",level:2},{value:"Client Setup",id:"client-setup",level:2},{value:"Server Setup",id:"server-setup",level:2},{value:"Step-by-step Backend Setup",id:"step-by-step-backend-setup",level:3},{value:"Initialize Environment Variables",id:"initialize-environment-variables",level:3},{value:"Database Setup (PostgreSQL + Prisma)",id:"database-setup-postgresql--prisma",level:3},{value:"Running the App in Local",id:"running-the-app-in-local",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"web-version-setup",children:"Web Version Setup"})}),"\n",(0,i.jsx)(n.p,{children:"This is the QuickEase 2.0's web version setup. Mobile app is yet to be developed."}),"\n",(0,i.jsx)(n.h2,{id:"forking-the-github-repository",children:"Forking the GitHub repository"}),"\n",(0,i.jsx)(n.p,{children:"To contribute or run the app locally, first fork the GitHub repo:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Go to ",(0,i.jsx)(n.a,{href:"https://github.com/dlord213/quickease-2.0",children:"https://github.com/dlord213/quickease-2.0"})]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Click the Fork button in the top-right corner."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Choose your GitHub account as the destination."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Then, clone your forked repo on your local device."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"git clone https://github.com/your-username/repository-name.git\r\ncd repository-name\n"})}),"\n",(0,i.jsx)(n.p,{children:"To keep your fork updated with the original:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"git remote add upstream https://github.com/dlord213/quickease-2.0.git\r\ngit fetch upstream\r\ngit merge upstream/main\n"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["Note: You can name ",(0,i.jsx)(n.code,{children:"upstream"})," anything you want, but it's standard convention."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"project-structure-overview",children:"Project Structure Overview"}),"\n",(0,i.jsx)(n.p,{children:"As described in the System Architecture section, QuickEase 2.0 follows a client-server structure that logically maps to a three-tier architecture. Here\u2019s a look at the folder layout:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"quickease-2.0/ (root directory)\r\n\u2502\r\n\u251c\u2500\u2500 client/      \u2192 Frontend (React + Vite)\r\n\u2502   \u251c\u2500\u2500 docs/        \u2192 QA-generated client-side documentation\r\n\u2502   \u251c\u2500\u2500 public/\r\n\u2502   \u2502   \u2514\u2500\u2500 assets/\r\n\u2502   \u251c\u2500\u2500 src/\r\n\u2502   \u2502   \u251c\u2500\u2500 components/\r\n\u2502   \u2502   \u251c\u2500\u2500 hooks/\r\n\u2502   \u2502   \u251c\u2500\u2500 routes/\r\n\u2502   \u2502   \u251c\u2500\u2500 types/\r\n\u2502   \u2502   \u2514\u2500\u2500 utils/\r\n\u2502   \u2502   \u2514\u2500\u2500 main.tsx\r\n\u2502   \u251c\u2500\u2500 global.css\r\n\u2502   \u251c\u2500\u2500 index.html\r\n\u2502   \u2514\u2500\u2500 vite.config.ts\r\n\u2502\r\n\u2514\u2500\u2500 server/      \u2192 Backend (Fastify + Prisma + PostgreSQL)\r\n    \u251c\u2500\u2500 docs/        \u2192 QA-generated server-side documentation\r\n    \u251c\u2500\u2500 modules/     \u2192 APIs, services, controllers, and routes\r\n    \u251c\u2500\u2500 prisma/      \u2192 Prisma schema and migrations\r\n    \u251c\u2500\u2500 tests/       \u2192 Jest mock test cases\r\n    \u251c\u2500\u2500 utils/\r\n    \u251c\u2500\u2500 server.ts\r\n    \u2514\u2500\u2500 fastify.config.ts\n"})}),"\n",(0,i.jsx)(n.h2,{id:"client-setup",children:"Client Setup"}),"\n",(0,i.jsx)(n.p,{children:"Now that you've installed all the prerequisites, it's time to set up the frontend side of the application."}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Open a new terminal window and navigate to the ",(0,i.jsx)(n.code,{children:"client/"})," directory:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"cd client\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Install the required node modules:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"npm install\n"})}),"\n",(0,i.jsx)(n.p,{children:"If you encounter dependency version conflicts, try this alternative command instead:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"npm install --force-legacy-deps\n"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Once the installation is complete, you're ready to run the client locally or continue with backend setup."}),"\n",(0,i.jsx)(n.h2,{id:"server-setup",children:"Server Setup"}),"\n",(0,i.jsx)(n.p,{children:"Nice job getting the client set up! Now let\u2019s get the backend running. This will activate the server-side functionalities such as authentication, AI services, and database access."}),"\n",(0,i.jsx)(n.h3,{id:"step-by-step-backend-setup",children:"Step-by-step Backend Setup"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Open a new terminal and navigate to the ",(0,i.jsx)(n.code,{children:"server/"})," directory:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"cd server\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Install dependencies:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"npm install\n"})}),"\n",(0,i.jsx)(n.p,{children:"If you run into dependency conflicts:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"npm install --force-legacy-deps\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Install the Model Context Protocol (MCP) SDK:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"npm install @modelcontextprotocol/sdk\n"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["QuickEase uses Google's Gemini API for AI features. MCP helps standardize and stabilize this connection. This also prevents the error: ",(0,i.jsx)(n.code,{children:"Error: Cannot find module '@modelcontextprotocol/sdk/types.js'"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"initialize-environment-variables",children:"Initialize Environment Variables"}),"\n",(0,i.jsxs)(n.p,{children:["Create a ",(0,i.jsx)(n.code,{children:".env"})," file inside the ",(0,i.jsx)(n.code,{children:"server/"})," directory and define these variables:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"JWT_SECRET_KEY"})," is for the secret key used in JWT."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"COOKIE_SECRET_KEY"})," is for the secret key used in cookies."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"DATABASE_URL"})," is for the database configuration mainly used in Prisma/PostgreSQL."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"GOOGLE_GEN_AI_API_KEY"})," is for @google/gen-ai API key used to generate AI-generated contents."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"CORS_FRONTEND_HOST"})," is for the cross-origin resource sharing which allows web pages to make requests to a different domain than the one they were loaded from."]}),"\n"]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"Note: Make sure to wrap the values inside a double quote."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'JWT_SECRET_KEY="your_secret_here"\r\nCOOKIE_SECRET_KEY="your_cookie_secret_here"\r\nDATABASE_URL="postgresql://postgres:dlord213@localhost:5432/postgres?schema=public"\r\nGOOGLE_GEN_AI_API_KEY="your_gemini_api_key_here"\r\nCORS_FRONTEND_HOST="http://localhost:5173"\n'})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["Need help with .env? You may run to AI agents like ChatGPT, Gemini, Claude, etc. and get explanations on what these environment variables are for, or find resources about this which are readily available on the internet. If you still don\u2019t know how this works, contact the developer ",(0,i.jsx)(n.strong,{children:"Jhon Lloyd Viernes"})," or the system analyst ",(0,i.jsx)(n.strong,{children:"Christine Mosqueda"})," if the developer is busy."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"database-setup-postgresql--prisma",children:"Database Setup (PostgreSQL + Prisma)"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Make sure your database schema is empty \u2014 Prisma will create the tables for you."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Push the schema migrations to your database by running the ",(0,i.jsx)(n.code,{children:"npx prisma db push"})," command on your terminal."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Generate the prisma client using the ",(0,i.jsx)(n.code,{children:"npx prisma generate"})," command."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Use tools like pgAdmin to verify if the tables have been created."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"running-the-app-in-local",children:"Running the App in Local"}),"\n",(0,i.jsx)(n.p,{children:"Now you're ready to run both frontend and backend!"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"On accessing frontend interface:"})," In the terminal where you're inside the client/ directory, run the ",(0,i.jsx)(n.code,{children:"npm run dev"})," command. Then, access the URL in any browser that Vite will give you. By default, it's in ",(0,i.jsx)(n.code,{children:"localhost:5173/"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"On powering backend server:"})," In the terminal where you're inside the server/ directory, run the ",(0,i.jsx)(n.code,{children:"npm run dev"})," command. Now your server is running locally and connected to your database and AI services."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>l});var t=s(6540);const i={},r=t.createContext(i);function o(e){const n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);