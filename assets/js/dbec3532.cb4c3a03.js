"use strict";(self.webpackChunkquickease_doc=self.webpackChunkquickease_doc||[]).push([[430],{8453:(e,r,t)=>{t.d(r,{R:()=>d,x:()=>a});var n=t(6540);const s={},i=n.createContext(s);function d(e){const r=n.useContext(i);return n.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:d(e.components),n.createElement(i.Provider,{value:r},e.children)}},9504:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>o,contentTitle:()=>a,default:()=>u,frontMatter:()=>d,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"database-schema","title":"Database Schema","description":"This is the database schema of QuickEase 2.0. This may change over time, depending on the updates.","source":"@site/docs/database-schema.md","sourceDirName":".","slug":"/database-schema","permalink":"/quickease-docs/docs/database-schema","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"sidebar_label":"Database Schema"},"sidebar":"tutorialSidebar","previous":{"title":"Web Version Setup","permalink":"/quickease-docs/docs/installation-and-setup/web-setup"},"next":{"title":"Tips From The Team","permalink":"/quickease-docs/docs/tips-from-the-team"}}');var s=t(4848),i=t(8453);const d={sidebar_label:"Database Schema"},a="Database Schema",o={},l=[{value:"Prisma Schema",id:"prisma-schema",level:2},{value:"Table Description",id:"table-description",level:2}];function c(e){const r={code:"code",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.header,{children:(0,s.jsx)(r.h1,{id:"database-schema",children:"Database Schema"})}),"\n",(0,s.jsxs)(r.p,{children:["This is the database schema of QuickEase 2.0. ",(0,s.jsx)(r.em,{children:"This may change over time, depending on the updates."})]}),"\n",(0,s.jsx)(r.h2,{id:"prisma-schema",children:"Prisma Schema"}),"\n",(0,s.jsx)(r.p,{children:"This is the complete schema model for the prisma client in generating the database."}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{children:'// This is your Prisma schema file,\r\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\r\n\r\ngenerator client {\r\n  provider = "prisma-client-js"\r\n  output   = "./client/"\r\n}\r\n\r\ndatasource db {\r\n  provider = "postgresql"\r\n  url      = env("DATABASE_URL")\r\n}\r\n\r\nmodel User {\r\n  id           String   @id @default(uuid())\r\n  password     String\r\n  first_name   String\r\n  last_name    String\r\n  email        String   @unique\r\n  gender       String?\r\n  phone_number String?\r\n  badges       Json?\r\n  is_public    Boolean  @default(true)\r\n  created_at   DateTime @default(now())\r\n  updated_at   DateTime @default(now())\r\n  is_admin     Boolean  @default(false)\r\n\r\n  flashcards           Flashcard[]\r\n  notes                Note[]\r\n  quizzes              Quiz[]\r\n  posts                Post[]\r\n  comments             Comment[]\r\n  postVotes            PostVote[]\r\n  commentVotes         CommentVote[]\r\n  quizAttempts         QuizAttempt[]\r\n  activityLogsReceived UserActivityLog[] @relation("ReceivedLogs")\r\n  activityLogsSent     UserActivityLog[] @relation("SentLogs")\r\n  forumReports         Report[]          @relation("ReportsByUser")\r\n}\r\n\r\nmodel Flashcard {\r\n  id              String   @id @default(uuid())\r\n  user            User     @relation(fields: [user_id], references: [id], onDelete: Cascade)\r\n  user_id         String\r\n  title           String\r\n  description     String?\r\n  flashcards      Json\r\n  is_public       Boolean? @default(true)\r\n  created_at      DateTime @default(now())\r\n  updated_at      DateTime @default(now())\r\n  is_ai_generated Boolean? @default(false)\r\n\r\n  post_attachments PostAttachment[]\r\n}\r\n\r\nmodel Note {\r\n  id               String           @id @default(uuid())\r\n  user             User             @relation(fields: [user_id], references: [id], onDelete: Cascade)\r\n  user_id          String\r\n  title            String\r\n  notes_content    String\r\n  is_public        Boolean?         @default(true)\r\n  created_at       DateTime         @default(now())\r\n  updated_at       DateTime         @default(now())\r\n  is_ai_generated  Boolean?         @default(false)\r\n  post_attachments PostAttachment[]\r\n}\r\n\r\nmodel Quiz {\r\n  id              String   @id @default(uuid())\r\n  user            User     @relation(fields: [user_id], references: [id], onDelete: Cascade)\r\n  user_id         String\r\n  quiz_content    Json\r\n  title           String\r\n  description     String?\r\n  is_public       Boolean? @default(true)\r\n  created_at      DateTime @default(now())\r\n  updated_at      DateTime @default(now())\r\n  is_ai_generated Boolean? @default(false)\r\n  is_randomized   Boolean? @default(false)\r\n  timed_quiz      Decimal?\r\n\r\n  post_attachments PostAttachment[]\r\n  attempts         QuizAttempt[]\r\n}\r\n\r\nmodel Tag {\r\n  id         String   @id @default(uuid())\r\n  tag_name   String   @unique\r\n  created_at DateTime @default(now())\r\n\r\n  posts PostTag[]\r\n}\r\n\r\nmodel Post {\r\n  id         String   @id @default(uuid())\r\n  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)\r\n  user_id    String\r\n  title      String\r\n  post_body  String\r\n  created_at DateTime @default(now())\r\n  updated_at DateTime @default(now())\r\n  is_public  Boolean  @default(true)\r\n\r\n  tags        PostTag[]\r\n  comments    Comment[]\r\n  votes       PostVote[]\r\n  attachments PostAttachment[]\r\n}\r\n\r\nmodel PostTag {\r\n  tag_id  String\r\n  post_id String\r\n\r\n  tag  Tag  @relation(fields: [tag_id], references: [id], onDelete: Cascade)\r\n  post Post @relation(fields: [post_id], references: [id], onDelete: Cascade)\r\n\r\n  @@id([tag_id, post_id])\r\n}\r\n\r\nmodel Comment {\r\n  id                String    @id @default(uuid())\r\n  parent_comment_id String?\r\n  parent_comment    Comment?  @relation("CommentReplies", fields: [parent_comment_id], references: [id], onDelete: Cascade)\r\n  replies           Comment[] @relation("CommentReplies")\r\n\r\n  post         Post     @relation(fields: [post_id], references: [id], onDelete: Cascade)\r\n  post_id      String\r\n  user         User     @relation(fields: [user_id], references: [id], onDelete: Cascade)\r\n  user_id      String\r\n  comment_body String\r\n  created_at   DateTime @default(now())\r\n  updated_at   DateTime @default(now())\r\n\r\n  votes CommentVote[]\r\n}\r\n\r\nmodel PostVote {\r\n  user_id   String\r\n  post_id   String\r\n  vote_type Int\r\n\r\n  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)\r\n  post Post @relation(fields: [post_id], references: [id], onDelete: Cascade)\r\n\r\n  @@id([user_id, post_id])\r\n}\r\n\r\nmodel CommentVote {\r\n  user_id    String\r\n  comment_id String\r\n  vote_type  Int\r\n\r\n  user    User    @relation(fields: [user_id], references: [id], onDelete: Cascade)\r\n  comment Comment @relation(fields: [comment_id], references: [id], onDelete: Cascade)\r\n\r\n  @@id([user_id, comment_id])\r\n}\r\n\r\nenum ResourceType {\r\n  NOTE\r\n  QUIZ\r\n  FLASHCARD\r\n}\r\n\r\nmodel PostAttachment {\r\n  id      String @id @default(uuid())\r\n  post    Post   @relation(fields: [post_id], references: [id], onDelete: Cascade)\r\n  post_id String\r\n\r\n  resource_type ResourceType\r\n\r\n  note_id      String?\r\n  flashcard_id String?\r\n  quiz_id      String?\r\n\r\n  note      Note?      @relation(fields: [note_id], references: [id])\r\n  flashcard Flashcard? @relation(fields: [flashcard_id], references: [id])\r\n  quiz      Quiz?      @relation(fields: [quiz_id], references: [id])\r\n\r\n  created_at DateTime @default(now())\r\n  updated_at DateTime @default(now())\r\n\r\n  @@index([resource_type])\r\n}\r\n\r\nmodel QuizAttempt {\r\n  id           String    @id @default(uuid())\r\n  quiz         Quiz      @relation(fields: [quiz_id], references: [id], onDelete: Cascade)\r\n  quiz_id      String\r\n  user         User      @relation(fields: [user_id], references: [id], onDelete: Cascade)\r\n  user_id      String\r\n  started_at   DateTime\r\n  completed_at DateTime?\r\n  answer_data  Json\r\n  is_public    Boolean   @default(false)\r\n}\r\n\r\nmodel Report {\r\n  id                   String   @id @default(uuid())\r\n  reported_by          User     @relation("ReportsByUser", fields: [reported_by_id], references: [id], onDelete: Cascade)\r\n  reported_by_id       String\r\n  description          String\r\n  reported_target_type String\r\n  reported_at          DateTime @default(now())\r\n  reported_target_id   String\r\n}\r\n\r\nmodel UserActivityLog {\r\n  id                String   @id @default(uuid())\r\n  recipient         User     @relation("ReceivedLogs", fields: [recipient_user_id], references: [id], onDelete: Cascade)\r\n  recipient_user_id String\r\n  actor             User     @relation("SentLogs", fields: [actor_user_id], references: [id], onDelete: Cascade)\r\n  actor_user_id     String\r\n  activity_type_id  String\r\n  activity_type     String\r\n  message           String\r\n  is_read           Boolean  @default(false)\r\n  created_at        DateTime @default(now())\r\n}\r\n\n'})}),"\n",(0,s.jsx)(r.h2,{id:"table-description",children:"Table Description"}),"\n",(0,s.jsx)(r.p,{children:"Each model defined in the prisma schema is a PostgreSQL database table. Here\u2019s a comprehensive guide to give you context for each table."}),"\n",(0,s.jsxs)(r.table,{children:[(0,s.jsx)(r.thead,{children:(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.th,{children:(0,s.jsx)(r.strong,{children:"Table Name"})}),(0,s.jsx)(r.th,{children:(0,s.jsx)(r.strong,{children:"Description"})})]})}),(0,s.jsxs)(r.tbody,{children:[(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"User"})}),(0,s.jsx)(r.td,{children:"The core entity of the database. Stores user data and maintains relationships with multiple other tables."})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"Flashcard"})}),(0,s.jsx)(r.td,{children:"Stores flashcard sets created by users."})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"Note"})}),(0,s.jsx)(r.td,{children:"Stores user-generated notes."})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"Quiz"})}),(0,s.jsx)(r.td,{children:"Stores quizzes generated or taken by users."})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"Tag"})}),(0,s.jsx)(r.td,{children:"Stores forum tags used for categorizing posts."})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"Post"})}),(0,s.jsx)(r.td,{children:"Stores user-submitted forum posts."})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"PostTag"})}),(0,s.jsx)(r.td,{children:"Stores the relationship between posts and tags. Helps with filtering and organizing posts under specific topics."})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"Comment"})}),(0,s.jsx)(r.td,{children:"Stores comments made by users on forum posts."})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"PostVote"})}),(0,s.jsx)(r.td,{children:"Stores user votes (upvotes/downvotes) on posts."})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"CommentVote"})}),(0,s.jsx)(r.td,{children:"Stores user votes on comments."})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"PostAttachment"})}),(0,s.jsx)(r.td,{children:"Stores study material attachments (notes, flashcards, quizzes) linked to specific forum posts."})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"QuizAttempt"})}),(0,s.jsx)(r.td,{children:"Stores records of quiz attempts by users, including scores, timestamps, and snapshots of selected answers."})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"Report"})}),(0,s.jsx)(r.td,{children:"Stores user-submitted reports for flagged content or violations, supporting early-stage moderation features."})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"UserActivityLog"})}),(0,s.jsx)(r.td,{children:"Stores user activity logs related to forum interactions (e.g., post views, likes, and other engagement metrics)."})]})]})]})]})}function u(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}}}]);